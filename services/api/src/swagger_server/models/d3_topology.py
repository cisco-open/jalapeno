# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.d3_link import D3Link  # noqa: F401,E501
from swagger_server.models.d3_node import D3Node  # noqa: F401,E501
from swagger_server import util


class D3Topology(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, nodes: List[D3Node]=None, links: List[D3Link]=None):  # noqa: E501
        """D3Topology - a model defined in Swagger

        :param nodes: The nodes of this D3Topology.  # noqa: E501
        :type nodes: List[D3Node]
        :param links: The links of this D3Topology.  # noqa: E501
        :type links: List[D3Link]
        """
        self.swagger_types = {
            'nodes': List[D3Node],
            'links': List[D3Link]
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'links': 'links'
        }

        self._nodes = nodes
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'D3Topology':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The d3Topology of this D3Topology.  # noqa: E501
        :rtype: D3Topology
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self) -> List[D3Node]:
        """Gets the nodes of this D3Topology.


        :return: The nodes of this D3Topology.
        :rtype: List[D3Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: List[D3Node]):
        """Sets the nodes of this D3Topology.


        :param nodes: The nodes of this D3Topology.
        :type nodes: List[D3Node]
        """

        self._nodes = nodes

    @property
    def links(self) -> List[D3Link]:
        """Gets the links of this D3Topology.


        :return: The links of this D3Topology.
        :rtype: List[D3Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[D3Link]):
        """Sets the links of this D3Topology.


        :param links: The links of this D3Topology.
        :type links: List[D3Link]
        """

        self._links = links
