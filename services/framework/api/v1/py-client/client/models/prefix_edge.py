# coding: utf-8

"""
    Voltron Framework

    This outlines version 1 of the voltron framework API. 

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PrefixEdge(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, key=None, _from=None, to=None, next_hop=None, interface_ip=None, as_path=None, labels=None, bgp_policy=None):
        """
        PrefixEdge - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'key': 'str',
            '_from': 'str',
            'to': 'str',
            'next_hop': 'str',
            'interface_ip': 'str',
            'as_path': 'list[str]',
            'labels': 'list[str]',
            'bgp_policy': 'str'
        }

        self.attribute_map = {
            'key': '_key',
            '_from': '_from',
            'to': '_to',
            'next_hop': 'NextHop',
            'interface_ip': 'InterfaceIP',
            'as_path': 'ASPath',
            'labels': 'Labels',
            'bgp_policy': 'BGPPolicy'
        }

        self._key = key
        self.__from = _from
        self._to = to
        self._next_hop = next_hop
        self._interface_ip = interface_ip
        self._as_path = as_path
        self._labels = labels
        self._bgp_policy = bgp_policy

    @property
    def key(self):
        """
        Gets the key of this PrefixEdge.

        :return: The key of this PrefixEdge.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this PrefixEdge.

        :param key: The key of this PrefixEdge.
        :type: str
        """

        self._key = key

    @property
    def _from(self):
        """
        Gets the _from of this PrefixEdge.

        :return: The _from of this PrefixEdge.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this PrefixEdge.

        :param _from: The _from of this PrefixEdge.
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """
        Gets the to of this PrefixEdge.

        :return: The to of this PrefixEdge.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this PrefixEdge.

        :param to: The to of this PrefixEdge.
        :type: str
        """

        self._to = to

    @property
    def next_hop(self):
        """
        Gets the next_hop of this PrefixEdge.

        :return: The next_hop of this PrefixEdge.
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """
        Sets the next_hop of this PrefixEdge.

        :param next_hop: The next_hop of this PrefixEdge.
        :type: str
        """

        self._next_hop = next_hop

    @property
    def interface_ip(self):
        """
        Gets the interface_ip of this PrefixEdge.

        :return: The interface_ip of this PrefixEdge.
        :rtype: str
        """
        return self._interface_ip

    @interface_ip.setter
    def interface_ip(self, interface_ip):
        """
        Sets the interface_ip of this PrefixEdge.

        :param interface_ip: The interface_ip of this PrefixEdge.
        :type: str
        """

        self._interface_ip = interface_ip

    @property
    def as_path(self):
        """
        Gets the as_path of this PrefixEdge.

        :return: The as_path of this PrefixEdge.
        :rtype: list[str]
        """
        return self._as_path

    @as_path.setter
    def as_path(self, as_path):
        """
        Sets the as_path of this PrefixEdge.

        :param as_path: The as_path of this PrefixEdge.
        :type: list[str]
        """

        self._as_path = as_path

    @property
    def labels(self):
        """
        Gets the labels of this PrefixEdge.

        :return: The labels of this PrefixEdge.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this PrefixEdge.

        :param labels: The labels of this PrefixEdge.
        :type: list[str]
        """

        self._labels = labels

    @property
    def bgp_policy(self):
        """
        Gets the bgp_policy of this PrefixEdge.

        :return: The bgp_policy of this PrefixEdge.
        :rtype: str
        """
        return self._bgp_policy

    @bgp_policy.setter
    def bgp_policy(self, bgp_policy):
        """
        Sets the bgp_policy of this PrefixEdge.

        :param bgp_policy: The bgp_policy of this PrefixEdge.
        :type: str
        """

        self._bgp_policy = bgp_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PrefixEdge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
