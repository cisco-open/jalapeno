# coding: utf-8

"""
    Voltron Framework

    This outlines version 1 of the voltron framework API. 

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Collector(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, key=None, name=None, description=None, status=None, edge_type=None, field_name=None, timeout=None, last_heartbeat=None):
        """
        Collector - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'key': 'str',
            'name': 'str',
            'description': 'str',
            'status': 'str',
            'edge_type': 'str',
            'field_name': 'str',
            'timeout': 'str',
            'last_heartbeat': 'str'
        }

        self.attribute_map = {
            'key': '_key',
            'name': 'Name',
            'description': 'Description',
            'status': 'Status',
            'edge_type': 'EdgeType',
            'field_name': 'FieldName',
            'timeout': 'Timeout',
            'last_heartbeat': 'LastHeartbeat'
        }

        self._key = key
        self._name = name
        self._description = description
        self._status = status
        self._edge_type = edge_type
        self._field_name = field_name
        self._timeout = timeout
        self._last_heartbeat = last_heartbeat

    @property
    def key(self):
        """
        Gets the key of this Collector.

        :return: The key of this Collector.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Collector.

        :param key: The key of this Collector.
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """
        Gets the name of this Collector.

        :return: The name of this Collector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Collector.

        :param name: The name of this Collector.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Collector.

        :return: The description of this Collector.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Collector.

        :param description: The description of this Collector.
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """
        Gets the status of this Collector.

        :return: The status of this Collector.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Collector.

        :param status: The status of this Collector.
        :type: str
        """
        allowed_values = ["Running", "Down"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def edge_type(self):
        """
        Gets the edge_type of this Collector.

        :return: The edge_type of this Collector.
        :rtype: str
        """
        return self._edge_type

    @edge_type.setter
    def edge_type(self, edge_type):
        """
        Sets the edge_type of this Collector.

        :param edge_type: The edge_type of this Collector.
        :type: str
        """

        self._edge_type = edge_type

    @property
    def field_name(self):
        """
        Gets the field_name of this Collector.

        :return: The field_name of this Collector.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """
        Sets the field_name of this Collector.

        :param field_name: The field_name of this Collector.
        :type: str
        """

        self._field_name = field_name

    @property
    def timeout(self):
        """
        Gets the timeout of this Collector.

        :return: The timeout of this Collector.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this Collector.

        :param timeout: The timeout of this Collector.
        :type: str
        """

        self._timeout = timeout

    @property
    def last_heartbeat(self):
        """
        Gets the last_heartbeat of this Collector.

        :return: The last_heartbeat of this Collector.
        :rtype: str
        """
        return self._last_heartbeat

    @last_heartbeat.setter
    def last_heartbeat(self, last_heartbeat):
        """
        Sets the last_heartbeat of this Collector.

        :param last_heartbeat: The last_heartbeat of this Collector.
        :type: str
        """

        self._last_heartbeat = last_heartbeat

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Collector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
