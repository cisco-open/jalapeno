// Automatically generated by MockGen. DO NOT EDIT!
// Source: database.go

package mock_database

import (
	gomock "github.com/golang/mock/gomock"
	"wwwin-github.cisco.com/spa-ie/voltron/services/framework/database"
)

// Mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseRecorder
}

// Recorder for MockDatabase (not exported)
type _MockDatabaseRecorder struct {
	mock *MockDatabase
}

func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &_MockDatabaseRecorder{mock}
	return mock
}

func (_m *MockDatabase) EXPECT() *_MockDatabaseRecorder {
	return _m.recorder
}

func (_m *MockDatabase) Insert(_param0 database.DBObject) error {
	ret := _m.ctrl.Call(_m, "Insert", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Insert(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Insert", arg0)
}

func (_m *MockDatabase) Update(_param0 database.DBObject) error {
	ret := _m.ctrl.Call(_m, "Update", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}

func (_m *MockDatabase) Upsert(_param0 database.DBObject) error {
	ret := _m.ctrl.Call(_m, "Upsert", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Upsert(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Upsert", arg0)
}

func (_m *MockDatabase) UpsertSafe(_param0 database.DBObject) error {
	ret := _m.ctrl.Call(_m, "UpsertSafe", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) UpsertSafe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpsertSafe", arg0)
}

func (_m *MockDatabase) Read(_param0 database.DBObject) error {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}

func (_m *MockDatabase) Delete(_param0 database.DBObject) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockDatabase) Query(_param0 string, _param1 map[string]interface{}, _param2 interface{}) ([]interface{}, error) {
	ret := _m.ctrl.Call(_m, "Query", _param0, _param1, _param2)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0, arg1, arg2)
}

func (_m *MockDatabase) QueryOnObject(_param0 database.DBObject, _param1 interface{}, _param2 map[string]string) ([]interface{}, error) {
	ret := _m.ctrl.Call(_m, "QueryOnObject", _param0, _param1, _param2)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) QueryOnObject(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryOnObject", arg0, arg1, arg2)
}
